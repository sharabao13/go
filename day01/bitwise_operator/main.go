package main

import "fmt"

func main() {
	/*
			位运算符
				将数值转为二进制按位运算
			按位与 &
				对应的数值全为1，则为1，有一个0，则为0
			按位或 |
				对应的数值全为0，才为0，有一个1，则为1
			异或 ^
				二元异或 a^b
					对应的数值相同为1，不同为0
				一元异或 ^a
					按位取反
						1---->0
						0---->1
			位清空 ^&
				对于 a &^b
					关注b上的数值
						如果为0，则去a对应上的数值
						如果为1，则结果位取0
						a 11010100
						b 01101001
						c = a &^ b // 10010100
						60 0011 1100
						13 0000 1101
			位移运算符
		    << 将数值转换为二进制在向左移动
			>> 将数值转换为二进制在向右移动

	*/
	a := 87
	fmt.Printf("%b\n", a)
	b := 176
	fmt.Printf("%b\n", b)
	/*
					a = 01010111
					b = 10110000
				---------------------
					& = 00010000  //16
					| = 11110111  //247
			     二元^ = 00011000  // 24
			    一元^a = 10101000  // 335
		            &^ = 01000111  //  71
	*/
	res1 := a & b
	fmt.Printf("%T,%d\n", res1, res1)

	res2 := a | b
	fmt.Printf("%T,%d\n", res2, res2)

	res3 := a ^ b
	fmt.Printf("%T,%d\n", res3, res3)

	res4 := ^a
	fmt.Printf("%T,%d\n", res4, res4)

	res5 := a &^ b
	fmt.Printf("%T,%d\n", res5, res5)
}
